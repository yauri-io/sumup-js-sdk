/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Currency} from './Currency';
import {TransactionID} from './TransactionID';
import {TransactionMixinBase} from './TransactionMixinBase';
import {TransactionMixinHistory} from './TransactionMixinHistory';
import {User} from './User';

/**
 * The TransactionHistory model module.
 * @module model/TransactionHistory
 * @version 1.0.0
 */
export class TransactionHistory extends TransactionMixinBase {
  /**
   * Constructs a new <code>TransactionHistory</code>.
   * @alias module:model/TransactionHistory
   * @class
   * @extends module:model/TransactionMixinBase
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>TransactionHistory</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionHistory} obj Optional instance to populate.
   * @return {module:model/TransactionHistory} The populated <code>TransactionHistory</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TransactionHistory();
      TransactionMixinBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('product_summary'))
        obj.productSummary = ApiClient.convertToType(data['product_summary'], 'String');
      if (data.hasOwnProperty('payouts_total'))
        obj.payoutsTotal = ApiClient.convertToType(data['payouts_total'], 'Number');
      if (data.hasOwnProperty('payouts_received'))
        obj.payoutsReceived = ApiClient.convertToType(data['payouts_received'], 'Number');
      if (data.hasOwnProperty('payout_plan'))
        obj.payoutPlan = ApiClient.convertToType(data['payout_plan'], 'String');
      if (data.hasOwnProperty('transaction_id'))
        obj.transactionId = TransactionID.constructFromObject(data['transaction_id']);
      if (data.hasOwnProperty('user'))
        obj.user = User.constructFromObject(data['user']);
      if (data.hasOwnProperty('type'))
        obj.type = ApiClient.convertToType(data['type'], 'String');
      if (data.hasOwnProperty('card_type'))
        obj.cardType = ApiClient.convertToType(data['card_type'], 'String');
    }
    return obj;
  }
}

/**
 * Short description of the payment. The value is taken from the `description` property of the related checkout resource.
 * @member {String} productSummary
 */
TransactionHistory.prototype.productSummary = undefined;

/**
 * Total number of payouts to the registered user specified in the `user` property.
 * @member {Number} payoutsTotal
 */
TransactionHistory.prototype.payoutsTotal = undefined;

/**
 * Number of payouts that are made to the registered user specified in the `user` property.
 * @member {Number} payoutsReceived
 */
TransactionHistory.prototype.payoutsReceived = undefined;

/**
 * Allowed values for the <code>payoutPlan</code> property.
 * @enum {String}
 * @readonly
 */
TransactionHistory.PayoutPlanEnum = {
  /**
   * value: "SINGLE_PAYMENT"
   * @const
   */
  SINGLE_PAYMENT: "SINGLE_PAYMENT",

  /**
   * value: "TRUE_INSTALLMENT"
   * @const
   */
  TRUE_INSTALLMENT: "TRUE_INSTALLMENT",

  /**
   * value: "ACCELERATED_INSTALLMENT"
   * @const
   */
  ACCELERATED_INSTALLMENT: "ACCELERATED_INSTALLMENT"
};
/**
 * Payout plan of the registered user at the time when the transaction was made.
 * @member {module:model/TransactionHistory.PayoutPlanEnum} payoutPlan
 */
TransactionHistory.prototype.payoutPlan = undefined;

/**
 * @member {module:model/TransactionID} transactionId
 */
TransactionHistory.prototype.transactionId = undefined;

/**
 * @member {module:model/User} user
 */
TransactionHistory.prototype.user = undefined;

/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
TransactionHistory.TypeEnum = {
  /**
   * value: "PAYMENT"
   * @const
   */
  PAYMENT: "PAYMENT",

  /**
   * value: "REFUND"
   * @const
   */
  REFUND: "REFUND",

  /**
   * value: "CHARGE_BACK"
   * @const
   */
  CHARGE_BACK: "CHARGE_BACK"
};
/**
 * Type of the transaction for the registered user specified in the `user` property.
 * @member {module:model/TransactionHistory.TypeEnum} type
 */
TransactionHistory.prototype.type = undefined;

/**
 * Allowed values for the <code>cardType</code> property.
 * @enum {String}
 * @readonly
 */
TransactionHistory.CardTypeEnum = {
  /**
   * value: "VISA"
   * @const
   */
  VISA: "VISA",

  /**
   * value: "AMEX"
   * @const
   */
  AMEX: "AMEX",

  /**
   * value: "CUP"
   * @const
   */
  CUP: "CUP",

  /**
   * value: "DINERS"
   * @const
   */
  DINERS: "DINERS",

  /**
   * value: "DISCOVER"
   * @const
   */
  DISCOVER: "DISCOVER",

  /**
   * value: "ELO"
   * @const
   */
  ELO: "ELO",

  /**
   * value: "ELV"
   * @const
   */
  ELV: "ELV",

  /**
   * value: "HIPERCARD"
   * @const
   */
  HIPERCARD: "HIPERCARD",

  /**
   * value: "JCB"
   * @const
   */
  JCB: "JCB",

  /**
   * value: "MAESTRO"
   * @const
   */
  MAESTRO: "MAESTRO",

  /**
   * value: "MASTERCARD"
   * @const
   */
  MASTERCARD: "MASTERCARD",

  /**
   * value: "VISA_ELECTRON"
   * @const
   */
  VISA_ELECTRON: "VISA_ELECTRON",

  /**
   * value: "VISA_VPAY"
   * @const
   */
  VISA_VPAY: "VISA_VPAY",

  /**
   * value: "UNKNOWN"
   * @const
   */
  UNKNOWN: "UNKNOWN"
};
/**
 * Issuing card network of the payment card used for the transaction.
 * @member {module:model/TransactionHistory.CardTypeEnum} cardType
 */
TransactionHistory.prototype.cardType = undefined;

