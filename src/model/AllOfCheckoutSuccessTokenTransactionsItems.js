/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Currency} from './Currency';
import {TransactionMixinBase} from './TransactionMixinBase';
import {TransactionMixinCheckout} from './TransactionMixinCheckout';

/**
 * The AllOfCheckoutSuccessTokenTransactionsItems model module.
 * @module model/AllOfCheckoutSuccessTokenTransactionsItems
 * @version 1.0.0
 */
export class AllOfCheckoutSuccessTokenTransactionsItems extends TransactionMixinBase {
  /**
   * Constructs a new <code>AllOfCheckoutSuccessTokenTransactionsItems</code>.
   * @alias module:model/AllOfCheckoutSuccessTokenTransactionsItems
   * @class
   * @extends module:model/TransactionMixinBase
   */
  constructor() {
    super();
  }

  /**
   * Constructs a <code>AllOfCheckoutSuccessTokenTransactionsItems</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AllOfCheckoutSuccessTokenTransactionsItems} obj Optional instance to populate.
   * @return {module:model/AllOfCheckoutSuccessTokenTransactionsItems} The populated <code>AllOfCheckoutSuccessTokenTransactionsItems</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AllOfCheckoutSuccessTokenTransactionsItems();
      TransactionMixinBase.constructFromObject(data, obj);
      if (data.hasOwnProperty('merchant_code'))
        obj.merchantCode = ApiClient.convertToType(data['merchant_code'], 'String');
      if (data.hasOwnProperty('vat_amount'))
        obj.vatAmount = ApiClient.convertToType(data['vat_amount'], 'Number');
      if (data.hasOwnProperty('tip_amount'))
        obj.tipAmount = ApiClient.convertToType(data['tip_amount'], 'Number');
      if (data.hasOwnProperty('entry_mode'))
        obj.entryMode = ApiClient.convertToType(data['entry_mode'], 'String');
      if (data.hasOwnProperty('auth_code'))
        obj.authCode = ApiClient.convertToType(data['auth_code'], 'String');
      if (data.hasOwnProperty('internal_id'))
        obj.internalId = ApiClient.convertToType(data['internal_id'], 'Number');
    }
    return obj;
  }
}

/**
 * Unique code of the registered merchant to whom the payment is made.
 * @member {String} merchantCode
 */
AllOfCheckoutSuccessTokenTransactionsItems.prototype.merchantCode = undefined;

/**
 * Amount of the applicable VAT (out of the total transaction amount).
 * @member {Number} vatAmount
 */
AllOfCheckoutSuccessTokenTransactionsItems.prototype.vatAmount = undefined;

/**
 * Amount of the tip (out of the total transaction amount).
 * @member {Number} tipAmount
 */
AllOfCheckoutSuccessTokenTransactionsItems.prototype.tipAmount = undefined;

/**
 * Allowed values for the <code>entryMode</code> property.
 * @enum {String}
 * @readonly
 */
AllOfCheckoutSuccessTokenTransactionsItems.EntryModeEnum = {
  /**
   * value: "CUSTOMER_ENTRY"
   * @const
   */
  CUSTOMER_ENTRY: "CUSTOMER_ENTRY"
};
/**
 * Entry mode of the payment details.
 * @member {module:model/AllOfCheckoutSuccessTokenTransactionsItems.EntryModeEnum} entryMode
 */
AllOfCheckoutSuccessTokenTransactionsItems.prototype.entryMode = undefined;

/**
 * Authorization code for the transaction sent by the payment card issuer or bank. Applicable only to card payments.
 * @member {String} authCode
 */
AllOfCheckoutSuccessTokenTransactionsItems.prototype.authCode = undefined;

/**
 * Internal unique ID of the transaction on the SumUp platform.
 * @member {Number} internalId
 */
AllOfCheckoutSuccessTokenTransactionsItems.prototype.internalId = undefined;

