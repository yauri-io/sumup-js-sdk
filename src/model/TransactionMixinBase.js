/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Currency} from './Currency';

/**
 * The TransactionMixinBase model module.
 * @module model/TransactionMixinBase
 * @version 1.0.0
 */
export class TransactionMixinBase {
  /**
   * Constructs a new <code>TransactionMixinBase</code>.
   * Details of the transaction.
   * @alias module:model/TransactionMixinBase
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>TransactionMixinBase</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransactionMixinBase} obj Optional instance to populate.
   * @return {module:model/TransactionMixinBase} The populated <code>TransactionMixinBase</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new TransactionMixinBase();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('transaction_code'))
        obj.transactionCode = ApiClient.convertToType(data['transaction_code'], 'String');
      if (data.hasOwnProperty('amount'))
        obj.amount = ApiClient.convertToType(data['amount'], 'Number');
      if (data.hasOwnProperty('currency'))
        obj.currency = Currency.constructFromObject(data['currency']);
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = ApiClient.convertToType(data['timestamp'], 'Date');
      if (data.hasOwnProperty('status'))
        obj.status = ApiClient.convertToType(data['status'], 'String');
      if (data.hasOwnProperty('payment_type'))
        obj.paymentType = ApiClient.convertToType(data['payment_type'], 'String');
      if (data.hasOwnProperty('installments_count'))
        obj.installmentsCount = ApiClient.convertToType(data['installments_count'], 'Number');
    }
    return obj;
  }
}

/**
 * Unique ID of the transaction.
 * @member {String} id
 */
TransactionMixinBase.prototype.id = undefined;

/**
 * Transaction code returned by the acquirer/processing entity after processing the transaction.
 * @member {String} transactionCode
 */
TransactionMixinBase.prototype.transactionCode = undefined;

/**
 * Total amount of the transaction.
 * @member {Number} amount
 */
TransactionMixinBase.prototype.amount = undefined;

/**
 * @member {module:model/Currency} currency
 */
TransactionMixinBase.prototype.currency = undefined;

/**
 * Date and time of the creation of the transaction. Response format expressed according to <a href=\"https://en.wikipedia.org/wiki/ISO_8601\" target=\"_blank\" rel=\"noopener\">ISO8601</a> code.
 * @member {Date} timestamp
 */
TransactionMixinBase.prototype.timestamp = undefined;

/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
TransactionMixinBase.StatusEnum = {
  /**
   * value: "SUCCESSFUL"
   * @const
   */
  SUCCESSFUL: "SUCCESSFUL",

  /**
   * value: "CANCELLED"
   * @const
   */
  CANCELLED: "CANCELLED",

  /**
   * value: "FAILED"
   * @const
   */
  FAILED: "FAILED",

  /**
   * value: "PENDING"
   * @const
   */
  PENDING: "PENDING"
};
/**
 * Current status of the transaction.
 * @member {module:model/TransactionMixinBase.StatusEnum} status
 */
TransactionMixinBase.prototype.status = undefined;

/**
 * Allowed values for the <code>paymentType</code> property.
 * @enum {String}
 * @readonly
 */
TransactionMixinBase.PaymentTypeEnum = {
  /**
   * value: "ECOM"
   * @const
   */
  ECOM: "ECOM",

  /**
   * value: "RECURRING"
   * @const
   */
  RECURRING: "RECURRING"
};
/**
 * Payment type used for the transaction.
 * @member {module:model/TransactionMixinBase.PaymentTypeEnum} paymentType
 */
TransactionMixinBase.prototype.paymentType = undefined;

/**
 * Current number of the installment for deferred payments.
 * @member {Number} installmentsCount
 */
TransactionMixinBase.prototype.installmentsCount = undefined;

