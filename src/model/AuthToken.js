/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The AuthToken model module.
 * @module model/AuthToken
 * @version 1.0.0
 */
export class AuthToken {
  /**
   * Constructs a new <code>AuthToken</code>.
   * Authorization token flow
   * @alias module:model/AuthToken
   * @class
   * @param grantType {module:model/AuthToken.GrantTypeEnum} The grant type used for obtaining an access token.
   * @param clientId {String} The client ID of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app\">registered it</a>.
   * @param clientSecret {String} The client secret of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app\">registered it</a>.
   * @param code {String} The authorization code that you received from requesting an authorization code.
   */
  constructor(grantType, clientId, clientSecret, code) {
    this.grantType = grantType;
    this.clientId = clientId;
    this.clientSecret = clientSecret;
    this.code = code;
  }

  /**
   * Constructs a <code>AuthToken</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AuthToken} obj Optional instance to populate.
   * @return {module:model/AuthToken} The populated <code>AuthToken</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AuthToken();
      if (data.hasOwnProperty('grant_type'))
        obj.grantType = ApiClient.convertToType(data['grant_type'], 'String');
      if (data.hasOwnProperty('client_id'))
        obj.clientId = ApiClient.convertToType(data['client_id'], 'String');
      if (data.hasOwnProperty('client_secret'))
        obj.clientSecret = ApiClient.convertToType(data['client_secret'], 'String');
      if (data.hasOwnProperty('code'))
        obj.code = ApiClient.convertToType(data['code'], 'String');
      if (data.hasOwnProperty('refresh_token'))
        obj.refreshToken = ApiClient.convertToType(data['refresh_token'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>grantType</code> property.
 * @enum {String}
 * @readonly
 */
AuthToken.GrantTypeEnum = {
  /**
   * value: "authorization_code"
   * @const
   */
  authorizationCode: "authorization_code",

  /**
   * value: "refresh_token"
   * @const
   */
  refreshToken: "refresh_token"
};
/**
 * The grant type used for obtaining an access token.
 * @member {module:model/AuthToken.GrantTypeEnum} grantType
 */
AuthToken.prototype.grantType = undefined;

/**
 * The client ID of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app\">registered it</a>.
 * @member {String} clientId
 */
AuthToken.prototype.clientId = undefined;

/**
 * The client secret of your application that was generated when you <a href=\"https://developer.sumup.com/docs/register-app\">registered it</a>.
 * @member {String} clientSecret
 */
AuthToken.prototype.clientSecret = undefined;

/**
 * The authorization code that you received from requesting an authorization code.
 * @member {String} code
 */
AuthToken.prototype.code = undefined;

/**
 * A **required** parameter when generating a refresh token.
 * @member {String} refreshToken
 */
AuthToken.prototype.refreshToken = undefined;

