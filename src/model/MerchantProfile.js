/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {AddressWithDetails} from './AddressWithDetails';
import {BankAccount} from './BankAccount';
import {BusinessOwners} from './BusinessOwners';
import {DoingBusinessAs} from './DoingBusinessAs';
import {LegalType} from './LegalType';
import {MerchantSettings} from './MerchantSettings';
import {VatRates} from './VatRates';

/**
 * The MerchantProfile model module.
 * @module model/MerchantProfile
 * @version 1.0.0
 */
export class MerchantProfile {
  /**
   * Constructs a new <code>MerchantProfile</code>.
   * Account&#x27;s merchant profile
   * @alias module:model/MerchantProfile
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>MerchantProfile</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MerchantProfile} obj Optional instance to populate.
   * @return {module:model/MerchantProfile} The populated <code>MerchantProfile</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MerchantProfile();
      if (data.hasOwnProperty('merchant_code'))
        obj.merchantCode = ApiClient.convertToType(data['merchant_code'], 'String');
      if (data.hasOwnProperty('company_name'))
        obj.companyName = ApiClient.convertToType(data['company_name'], 'String');
      if (data.hasOwnProperty('website'))
        obj.website = ApiClient.convertToType(data['website'], 'String');
      if (data.hasOwnProperty('legal_type'))
        obj.legalType = LegalType.constructFromObject(data['legal_type']);
      if (data.hasOwnProperty('merchant_category_code'))
        obj.merchantCategoryCode = ApiClient.convertToType(data['merchant_category_code'], 'String');
      if (data.hasOwnProperty('mobile_phone'))
        obj.mobilePhone = ApiClient.convertToType(data['mobile_phone'], 'String');
      if (data.hasOwnProperty('company_registration_number'))
        obj.companyRegistrationNumber = ApiClient.convertToType(data['company_registration_number'], 'String');
      if (data.hasOwnProperty('vat_id'))
        obj.vatId = ApiClient.convertToType(data['vat_id'], 'String');
      if (data.hasOwnProperty('permanent_certificate_access_code'))
        obj.permanentCertificateAccessCode = ApiClient.convertToType(data['permanent_certificate_access_code'], 'String');
      if (data.hasOwnProperty('nature_and_purpose'))
        obj.natureAndPurpose = ApiClient.convertToType(data['nature_and_purpose'], 'String');
      if (data.hasOwnProperty('address'))
        obj.address = AddressWithDetails.constructFromObject(data['address']);
      if (data.hasOwnProperty('business_owners'))
        obj.businessOwners = BusinessOwners.constructFromObject(data['business_owners']);
      if (data.hasOwnProperty('doing_business_as'))
        obj.doingBusinessAs = DoingBusinessAs.constructFromObject(data['doing_business_as']);
      if (data.hasOwnProperty('settings'))
        obj.settings = MerchantSettings.constructFromObject(data['settings']);
      if (data.hasOwnProperty('vat_rates'))
        obj.vatRates = VatRates.constructFromObject(data['vat_rates']);
      if (data.hasOwnProperty('locale'))
        obj.locale = ApiClient.convertToType(data['locale'], 'String');
      if (data.hasOwnProperty('bank_accounts'))
        obj.bankAccounts = ApiClient.convertToType(data['bank_accounts'], [BankAccount]);
      if (data.hasOwnProperty('extdev'))
        obj.extdev = ApiClient.convertToType(data['extdev'], 'Boolean');
      if (data.hasOwnProperty('payout_zone_migrated'))
        obj.payoutZoneMigrated = ApiClient.convertToType(data['payout_zone_migrated'], 'Boolean');
      if (data.hasOwnProperty('country'))
        obj.country = ApiClient.convertToType(data['country'], 'String');
    }
    return obj;
  }
}

/**
 * Unique identifying code of the merchant profile
 * @member {String} merchantCode
 */
MerchantProfile.prototype.merchantCode = undefined;

/**
 * Company name
 * @member {String} companyName
 */
MerchantProfile.prototype.companyName = undefined;

/**
 * Website
 * @member {String} website
 */
MerchantProfile.prototype.website = undefined;

/**
 * @member {module:model/LegalType} legalType
 */
MerchantProfile.prototype.legalType = undefined;

/**
 * Merchant category code
 * @member {String} merchantCategoryCode
 */
MerchantProfile.prototype.merchantCategoryCode = undefined;

/**
 * Mobile phone number
 * @member {String} mobilePhone
 */
MerchantProfile.prototype.mobilePhone = undefined;

/**
 * Company registration number
 * @member {String} companyRegistrationNumber
 */
MerchantProfile.prototype.companyRegistrationNumber = undefined;

/**
 * Vat ID
 * @member {String} vatId
 */
MerchantProfile.prototype.vatId = undefined;

/**
 * Permanent certificate access code &#40;Portugal&#41;
 * @member {String} permanentCertificateAccessCode
 */
MerchantProfile.prototype.permanentCertificateAccessCode = undefined;

/**
 * Nature and purpose of the business
 * @member {String} natureAndPurpose
 */
MerchantProfile.prototype.natureAndPurpose = undefined;

/**
 * @member {module:model/AddressWithDetails} address
 */
MerchantProfile.prototype.address = undefined;

/**
 * @member {module:model/BusinessOwners} businessOwners
 */
MerchantProfile.prototype.businessOwners = undefined;

/**
 * @member {module:model/DoingBusinessAs} doingBusinessAs
 */
MerchantProfile.prototype.doingBusinessAs = undefined;

/**
 * @member {module:model/MerchantSettings} settings
 */
MerchantProfile.prototype.settings = undefined;

/**
 * @member {module:model/VatRates} vatRates
 */
MerchantProfile.prototype.vatRates = undefined;

/**
 * Merchant locale &#40;for internal usage only&#41;
 * @member {String} locale
 */
MerchantProfile.prototype.locale = undefined;

/**
 * @member {Array.<module:model/BankAccount>} bankAccounts
 */
MerchantProfile.prototype.bankAccounts = undefined;

/**
 * True if the merchant is extdev
 * @member {Boolean} extdev
 */
MerchantProfile.prototype.extdev = undefined;

/**
 * True if the payout zone of this merchant is migrated
 * @member {Boolean} payoutZoneMigrated
 */
MerchantProfile.prototype.payoutZoneMigrated = undefined;

/**
 * Merchant country isocode &#40;for internal usage only&#41;
 * @member {String} country
 */
MerchantProfile.prototype.country = undefined;

