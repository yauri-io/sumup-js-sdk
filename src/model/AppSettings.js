/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';

/**
 * The AppSettings model module.
 * @module model/AppSettings
 * @version 1.0.0
 */
export class AppSettings {
  /**
   * Constructs a new <code>AppSettings</code>.
   * Mobile app settings
   * @alias module:model/AppSettings
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>AppSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AppSettings} obj Optional instance to populate.
   * @return {module:model/AppSettings} The populated <code>AppSettings</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new AppSettings();
      if (data.hasOwnProperty('checkout_preference'))
        obj.checkoutPreference = ApiClient.convertToType(data['checkout_preference'], 'String');
      if (data.hasOwnProperty('include_vat'))
        obj.includeVat = ApiClient.convertToType(data['include_vat'], 'Boolean');
      if (data.hasOwnProperty('manual_entry_tutorial'))
        obj.manualEntryTutorial = ApiClient.convertToType(data['manual_entry_tutorial'], 'Boolean');
      if (data.hasOwnProperty('mobile_payment_tutorial'))
        obj.mobilePaymentTutorial = ApiClient.convertToType(data['mobile_payment_tutorial'], 'Boolean');
      if (data.hasOwnProperty('tax_enabled'))
        obj.taxEnabled = ApiClient.convertToType(data['tax_enabled'], 'Boolean');
      if (data.hasOwnProperty('mobile_payment'))
        obj.mobilePayment = ApiClient.convertToType(data['mobile_payment'], 'String');
      if (data.hasOwnProperty('reader_payment'))
        obj.readerPayment = ApiClient.convertToType(data['reader_payment'], 'String');
      if (data.hasOwnProperty('cash_payment'))
        obj.cashPayment = ApiClient.convertToType(data['cash_payment'], 'String');
      if (data.hasOwnProperty('advanced_mode'))
        obj.advancedMode = ApiClient.convertToType(data['advanced_mode'], 'String');
      if (data.hasOwnProperty('expected_max_transaction_amount'))
        obj.expectedMaxTransactionAmount = ApiClient.convertToType(data['expected_max_transaction_amount'], 'Number');
      if (data.hasOwnProperty('manual_entry'))
        obj.manualEntry = ApiClient.convertToType(data['manual_entry'], 'String');
      if (data.hasOwnProperty('terminal_mode_tutorial'))
        obj.terminalModeTutorial = ApiClient.convertToType(data['terminal_mode_tutorial'], 'Boolean');
      if (data.hasOwnProperty('tipping'))
        obj.tipping = ApiClient.convertToType(data['tipping'], 'String');
      if (data.hasOwnProperty('tip_rates'))
        obj.tipRates = ApiClient.convertToType(data['tip_rates'], ['Number']);
      if (data.hasOwnProperty('barcode_scanner'))
        obj.barcodeScanner = ApiClient.convertToType(data['barcode_scanner'], 'String');
      if (data.hasOwnProperty('referral'))
        obj.referral = ApiClient.convertToType(data['referral'], 'String');
    }
    return obj;
  }
}

/**
 * Checkout preference
 * @member {String} checkoutPreference
 */
AppSettings.prototype.checkoutPreference = undefined;

/**
 * Include vat.
 * @member {Boolean} includeVat
 */
AppSettings.prototype.includeVat = undefined;

/**
 * Manual entry tutorial.
 * @member {Boolean} manualEntryTutorial
 */
AppSettings.prototype.manualEntryTutorial = undefined;

/**
 * Mobile payment tutorial.
 * @member {Boolean} mobilePaymentTutorial
 */
AppSettings.prototype.mobilePaymentTutorial = undefined;

/**
 * Tax enabled.
 * @member {Boolean} taxEnabled
 */
AppSettings.prototype.taxEnabled = undefined;

/**
 * Mobile payment.
 * @member {String} mobilePayment
 */
AppSettings.prototype.mobilePayment = undefined;

/**
 * Reader payment.
 * @member {String} readerPayment
 */
AppSettings.prototype.readerPayment = undefined;

/**
 * Cash payment.
 * @member {String} cashPayment
 */
AppSettings.prototype.cashPayment = undefined;

/**
 * Advanced mode.
 * @member {String} advancedMode
 */
AppSettings.prototype.advancedMode = undefined;

/**
 * Expected max transaction amount.
 * @member {Number} expectedMaxTransactionAmount
 */
AppSettings.prototype.expectedMaxTransactionAmount = undefined;

/**
 * Manual entry.
 * @member {String} manualEntry
 */
AppSettings.prototype.manualEntry = undefined;

/**
 * Terminal mode tutorial.
 * @member {Boolean} terminalModeTutorial
 */
AppSettings.prototype.terminalModeTutorial = undefined;

/**
 * Tipping.
 * @member {String} tipping
 */
AppSettings.prototype.tipping = undefined;

/**
 * Tip rates.
 * @member {Array.<Number>} tipRates
 */
AppSettings.prototype.tipRates = undefined;

/**
 * Barcode scanner.
 * @member {String} barcodeScanner
 */
AppSettings.prototype.barcodeScanner = undefined;

/**
 * Referral.
 * @member {String} referral
 */
AppSettings.prototype.referral = undefined;

