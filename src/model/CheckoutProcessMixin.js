/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {Card} from './Card';
import {MandatePayload} from './MandatePayload';

/**
 * The CheckoutProcessMixin model module.
 * @module model/CheckoutProcessMixin
 * @version 1.0.0
 */
export class CheckoutProcessMixin {
  /**
   * Constructs a new <code>CheckoutProcessMixin</code>.
   * Details of the payment instrument for processing the checkout.
   * @alias module:model/CheckoutProcessMixin
   * @class
   * @param paymentType {module:model/CheckoutProcessMixin.PaymentTypeEnum} 
   */
  constructor(paymentType) {
    this.paymentType = paymentType;
  }

  /**
   * Constructs a <code>CheckoutProcessMixin</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/CheckoutProcessMixin} obj Optional instance to populate.
   * @return {module:model/CheckoutProcessMixin} The populated <code>CheckoutProcessMixin</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new CheckoutProcessMixin();
      if (data.hasOwnProperty('payment_type'))
        obj.paymentType = ApiClient.convertToType(data['payment_type'], 'String');
      if (data.hasOwnProperty('installments'))
        obj.installments = ApiClient.convertToType(data['installments'], 'Number');
      if (data.hasOwnProperty('mandate'))
        obj.mandate = MandatePayload.constructFromObject(data['mandate']);
      if (data.hasOwnProperty('card'))
        obj.card = Card.constructFromObject(data['card']);
      if (data.hasOwnProperty('token'))
        obj.token = ApiClient.convertToType(data['token'], 'String');
      if (data.hasOwnProperty('customer_id'))
        obj.customerId = ApiClient.convertToType(data['customer_id'], 'String');
    }
    return obj;
  }
}

/**
 * Allowed values for the <code>paymentType</code> property.
 * @enum {String}
 * @readonly
 */
CheckoutProcessMixin.PaymentTypeEnum = {
  /**
   * value: "card"
   * @const
   */
  card: "card",

  /**
   * value: "token"
   * @const
   */
  token: "token",

  /**
   * value: "boleto"
   * @const
   */
  boleto: "boleto",

  /**
   * value: "ideal"
   * @const
   */
  ideal: "ideal",

  /**
   * value: "sofort"
   * @const
   */
  sofort: "sofort",

  /**
   * value: "bancontact"
   * @const
   */
  bancontact: "bancontact"
};
/**
 * @member {module:model/CheckoutProcessMixin.PaymentTypeEnum} paymentType
 */
CheckoutProcessMixin.prototype.paymentType = undefined;

/**
 * Number of installments for deferred payments. Available only to merchant users in Brazil.
 * @member {Number} installments
 */
CheckoutProcessMixin.prototype.installments = undefined;

/**
 * @member {module:model/MandatePayload} mandate
 */
CheckoutProcessMixin.prototype.mandate = undefined;

/**
 * @member {module:model/Card} card
 */
CheckoutProcessMixin.prototype.card = undefined;

/**
 * __Required when the payment type is `token`.__ Unique token identifying the saved payment card for a customer.
 * @member {String} token
 */
CheckoutProcessMixin.prototype.token = undefined;

/**
 * __Required when the payment type is `token`.__ Unique ID of the customer.
 * @member {String} customerId
 */
CheckoutProcessMixin.prototype.customerId = undefined;

