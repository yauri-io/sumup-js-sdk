/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {AmountEvent} from './AmountEvent';
import {EventID} from './EventID';
import {EventStatus} from './EventStatus';
import {EventType} from './EventType';
import {TimestampEvent} from './TimestampEvent';
import {TransactionID} from './TransactionID';

/**
 * The Event model module.
 * @module model/Event
 * @version 1.0.0
 */
export class Event {
  /**
   * Constructs a new <code>Event</code>.
   * @alias module:model/Event
   * @class
   */
  constructor() {
  }

  /**
   * Constructs a <code>Event</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/Event} obj Optional instance to populate.
   * @return {module:model/Event} The populated <code>Event</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new Event();
      if (data.hasOwnProperty('id'))
        obj.id = EventID.constructFromObject(data['id']);
      if (data.hasOwnProperty('transaction_id'))
        obj.transactionId = TransactionID.constructFromObject(data['transaction_id']);
      if (data.hasOwnProperty('type'))
        obj.type = EventType.constructFromObject(data['type']);
      if (data.hasOwnProperty('status'))
        obj.status = EventStatus.constructFromObject(data['status']);
      if (data.hasOwnProperty('amount'))
        obj.amount = AmountEvent.constructFromObject(data['amount']);
      if (data.hasOwnProperty('timestamp'))
        obj.timestamp = TimestampEvent.constructFromObject(data['timestamp']);
      if (data.hasOwnProperty('fee_amount'))
        obj.feeAmount = ApiClient.convertToType(data['fee_amount'], 'Number');
      if (data.hasOwnProperty('installment_number'))
        obj.installmentNumber = ApiClient.convertToType(data['installment_number'], 'Number');
      if (data.hasOwnProperty('deducted_amount'))
        obj.deductedAmount = ApiClient.convertToType(data['deducted_amount'], 'Number');
      if (data.hasOwnProperty('deducted_fee_amount'))
        obj.deductedFeeAmount = ApiClient.convertToType(data['deducted_fee_amount'], 'Number');
    }
    return obj;
  }
}

/**
 * @member {module:model/EventID} id
 */
Event.prototype.id = undefined;

/**
 * @member {module:model/TransactionID} transactionId
 */
Event.prototype.transactionId = undefined;

/**
 * @member {module:model/EventType} type
 */
Event.prototype.type = undefined;

/**
 * @member {module:model/EventStatus} status
 */
Event.prototype.status = undefined;

/**
 * @member {module:model/AmountEvent} amount
 */
Event.prototype.amount = undefined;

/**
 * @member {module:model/TimestampEvent} timestamp
 */
Event.prototype.timestamp = undefined;

/**
 * Amount of the fee related to the event.
 * @member {Number} feeAmount
 */
Event.prototype.feeAmount = undefined;

/**
 * Consequtive number of the installment.
 * @member {Number} installmentNumber
 */
Event.prototype.installmentNumber = undefined;

/**
 * Amount deducted for the event.
 * @member {Number} deductedAmount
 */
Event.prototype.deductedAmount = undefined;

/**
 * Amount of the fee deducted for the event.
 * @member {Number} deductedFeeAmount
 */
Event.prototype.deductedFeeAmount = undefined;

