/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from '../ApiClient';
import {AddressPayload} from './AddressPayload';
import {BusinessOwners} from './BusinessOwners';
import {MerchantProfilePayloadDoingBusinessAs} from './MerchantProfilePayloadDoingBusinessAs';

/**
 * The MerchantProfilePayload model module.
 * @module model/MerchantProfilePayload
 * @version 1.0.0
 */
export class MerchantProfilePayload {
  /**
   * Constructs a new <code>MerchantProfilePayload</code>.
   * Account&#x27;s merchant profile
   * @alias module:model/MerchantProfilePayload
   * @class
   * @param legalTypeId {Number} Id of the legal type of the merchant
   * @param merchantCategoryCode {String} Merchant category code
   * @param companyName {String} Company name
   * @param companyRegistrationNumber {String} Company registration number
   * @param address {module:model/AddressPayload} 
   */
  constructor(legalTypeId, merchantCategoryCode, companyName, companyRegistrationNumber, address) {
    this.legalTypeId = legalTypeId;
    this.merchantCategoryCode = merchantCategoryCode;
    this.companyName = companyName;
    this.companyRegistrationNumber = companyRegistrationNumber;
    this.address = address;
  }

  /**
   * Constructs a <code>MerchantProfilePayload</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/MerchantProfilePayload} obj Optional instance to populate.
   * @return {module:model/MerchantProfilePayload} The populated <code>MerchantProfilePayload</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new MerchantProfilePayload();
      if (data.hasOwnProperty('legal_type_id'))
        obj.legalTypeId = ApiClient.convertToType(data['legal_type_id'], 'Number');
      if (data.hasOwnProperty('merchant_category_code'))
        obj.merchantCategoryCode = ApiClient.convertToType(data['merchant_category_code'], 'String');
      if (data.hasOwnProperty('company_name'))
        obj.companyName = ApiClient.convertToType(data['company_name'], 'String');
      if (data.hasOwnProperty('company_registration_number'))
        obj.companyRegistrationNumber = ApiClient.convertToType(data['company_registration_number'], 'String');
      if (data.hasOwnProperty('vat_id'))
        obj.vatId = ApiClient.convertToType(data['vat_id'], 'String');
      if (data.hasOwnProperty('permanent_certificate_access_code'))
        obj.permanentCertificateAccessCode = ApiClient.convertToType(data['permanent_certificate_access_code'], 'String');
      if (data.hasOwnProperty('website'))
        obj.website = ApiClient.convertToType(data['website'], 'String');
      if (data.hasOwnProperty('nature_and_purpose'))
        obj.natureAndPurpose = ApiClient.convertToType(data['nature_and_purpose'], 'String');
      if (data.hasOwnProperty('mobile_phone'))
        obj.mobilePhone = ApiClient.convertToType(data['mobile_phone'], 'String');
      if (data.hasOwnProperty('address'))
        obj.address = AddressPayload.constructFromObject(data['address']);
      if (data.hasOwnProperty('doing_business_as'))
        obj.doingBusinessAs = MerchantProfilePayloadDoingBusinessAs.constructFromObject(data['doing_business_as']);
      if (data.hasOwnProperty('business_owners'))
        obj.businessOwners = BusinessOwners.constructFromObject(data['business_owners']);
      if (data.hasOwnProperty('is_test_account'))
        obj.isTestAccount = ApiClient.convertToType(data['is_test_account'], 'Boolean');
    }
    return obj;
  }
}

/**
 * Id of the legal type of the merchant
 * @member {Number} legalTypeId
 */
MerchantProfilePayload.prototype.legalTypeId = undefined;

/**
 * Merchant category code
 * @member {String} merchantCategoryCode
 */
MerchantProfilePayload.prototype.merchantCategoryCode = undefined;

/**
 * Company name
 * @member {String} companyName
 */
MerchantProfilePayload.prototype.companyName = undefined;

/**
 * Company registration number
 * @member {String} companyRegistrationNumber
 */
MerchantProfilePayload.prototype.companyRegistrationNumber = undefined;

/**
 * Vat ID
 * @member {String} vatId
 */
MerchantProfilePayload.prototype.vatId = undefined;

/**
 * Payment certificate access code
 * @member {String} permanentCertificateAccessCode
 */
MerchantProfilePayload.prototype.permanentCertificateAccessCode = undefined;

/**
 * Company website
 * @member {String} website
 */
MerchantProfilePayload.prototype.website = undefined;

/**
 * Nature and purpose of the business. Required for the following merchant category codes: 5999, 7392, 8999, 5694, 5969, 7299, 7399
 * @member {String} natureAndPurpose
 */
MerchantProfilePayload.prototype.natureAndPurpose = undefined;

/**
 * Mobile number
 * @member {String} mobilePhone
 */
MerchantProfilePayload.prototype.mobilePhone = undefined;

/**
 * @member {module:model/AddressPayload} address
 */
MerchantProfilePayload.prototype.address = undefined;

/**
 * @member {module:model/MerchantProfilePayloadDoingBusinessAs} doingBusinessAs
 */
MerchantProfilePayload.prototype.doingBusinessAs = undefined;

/**
 * @member {module:model/BusinessOwners} businessOwners
 */
MerchantProfilePayload.prototype.businessOwners = undefined;

/**
 * Defines if the account nature is for testing
 * @member {Boolean} isTestAccount
 */
MerchantProfilePayload.prototype.isTestAccount = undefined;

