/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {InlineResponse2002} from '../model/InlineResponse2002';
import {TransactionFull} from '../model/TransactionFull';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1.0.0
*/
export class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the meTransactionsGet operation.
     * @callback moduleapi/TransactionsApi~meTransactionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionFull{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a transaction
     * Retrieves the full details of an identified transaction. The transaction resource is identified by a query parameter and *one* of following parameters is required:  *  &#x60;id&#x60;  *  &#x60;internal_id&#x60;  *  &#x60;transaction_code&#x60;  *  &#x60;foreign_transaction_id&#x60;  *  &#x60;client_transaction_id&#x60; 
     * @param {Object} opts Optional parameters
     * @param {String} opts.id Retrieves the transaction resource with the specified transaction ID (the &#x60;id&#x60; parameter in the transaction resource).
     * @param {String} opts.internalId Retrieves the transaction resource with the specified internal transaction ID (the &#x60;internal_id&#x60; parameter in the transaction resource).
     * @param {String} opts.transactionCode Retrieves the transaction resource with the specified transaction code.
     * @param {module:api/TransactionsApi~meTransactionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    meTransactionsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'id': opts['id'],'internal_id': opts['internalId'],'transaction_code': opts['transactionCode']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionFull;

      return this.apiClient.callApi(
        '/me/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the meTransactionsHistoryGet operation.
     * @callback moduleapi/TransactionsApi~meTransactionsHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List transactions
     * Lists detailed history of all transactions associated with the merchant account.
     * @param {Object} opts Optional parameters
     * @param {String} opts.transactionCode Retrieves the transaction resource with the specified transaction code.
     * @param {module:model/String} opts.order Specifies the order in which the returned results are displayed.
     * @param {Number} opts.limit Specifies the maximum number of results per page. Value must be a positive integer and if not specified, will return 10 results.
     * @param {Array.<String>} opts.users Filters the returned results by user email.
     * @param {Array.<module:model/String>} opts.statuses Filters the returned results by the specified list of final statuses of the transactions.
     * @param {Array.<module:model/String>} opts.paymentTypes Filters the returned results by the specified list of payment types used for the transactions.
     * @param {Array.<module:model/String>} opts.types Filters the returned results by the specified list of transaction types.
     * @param {Date} opts.changesSince Filters the results by the latest modification time of resources and returns only transactions that are modified *at or after* the specified timestamp (in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener\&quot;&gt;ISO8601&lt;/a&gt; format).
     * @param {Date} opts.newestTime Filters the results by the creation time of resources and returns only transactions that are created *before* the specified timestamp (in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener\&quot;&gt;ISO8601&lt;/a&gt; format).
     * @param {String} opts.newestRef Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are *smaller* than the specified value. This parameters supersedes the &#x60;newest_time&#x60; parameter (if both are provided in the request).
     * @param {Date} opts.oldestTime Filters the results by the creation time of resources and returns only transactions that are created *at or after* the specified timestamp (in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot; target&#x3D;\&quot;_blank\&quot; rel&#x3D;\&quot;noopener\&quot;&gt;ISO8601&lt;/a&gt; format).
     * @param {String} opts.oldestRef Filters the results by the reference ID of transaciton events and returns only transactions with events whose IDs are *greater* than the specified value. This parameters supersedes the &#x60;oldest_time&#x60; parameter (if both are provided in the request).
     * @param {module:api/TransactionsApi~meTransactionsHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    meTransactionsHistoryGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        'transaction_code': opts['transactionCode'],'order': opts['order'],'limit': opts['limit'],'users': this.apiClient.buildCollectionParam(opts['users'], 'multi'),'statuses': this.apiClient.buildCollectionParam(opts['statuses'], 'multi'),'payment_types': this.apiClient.buildCollectionParam(opts['paymentTypes'], 'multi'),'types': this.apiClient.buildCollectionParam(opts['types'], 'multi'),'changes_since': opts['changesSince'],'newest_time': opts['newestTime'],'newest_ref': opts['newestRef'],'oldest_time': opts['oldestTime'],'oldest_ref': opts['oldestRef']
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/me/transactions/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}