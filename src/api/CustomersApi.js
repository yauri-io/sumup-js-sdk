/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Customer} from '../model/Customer';
import {CustomerResponse} from '../model/CustomerResponse';
import {Error} from '../model/Error';
import {ErrorForbidden} from '../model/ErrorForbidden';
import {PaymentInstrumentCard} from '../model/PaymentInstrumentCard';
import {PaymentInstrumentResponse} from '../model/PaymentInstrumentResponse';

/**
* Customers service.
* @module api/CustomersApi
* @version 1.0.0
*/
export class CustomersApi {

    /**
    * Constructs a new CustomersApi. 
    * @alias module:api/CustomersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the customersCustomerIdGet operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a customer
     * Retrieves an identified saved customer resource through the unique &#x60;customer_id&#x60; parameter, generated upon customer creation.
     * @param {String} customerId Unique ID of the saved customer resource.
     * @param {module:api/CustomersApi~customersCustomerIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersCustomerIdGet(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdGet");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CustomerResponse;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersCustomerIdPaymentInstrumentsGet operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdPaymentInstrumentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PaymentInstrumentResponse>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List payment instruments
     * Lists all payment instrument resources that are saved for an identified customer.
     * @param {String} customerId Unique ID of the saved customer resource.
     * @param {module:api/CustomersApi~customersCustomerIdPaymentInstrumentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersCustomerIdPaymentInstrumentsGet(customerId, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdPaymentInstrumentsGet");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [PaymentInstrumentResponse];

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment-instruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersCustomerIdPaymentInstrumentsPost operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdPaymentInstrumentsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PaymentInstrumentResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a payment instrument
     * Creates and activates a new payment instrument resource by saving a payment card for an identified customer. Implement to improve customer experience by skipping the step of entering payment instrument details.  The token created via this endpoint &lt;b&gt;can not&lt;/b&gt; be used for recurring payments by merchants operating within the EU. For more information visit our &lt;a href&#x3D;\&quot;https://developer.sumup.com/docs/recurring-payments/\&quot; target&#x3D;\&quot;_blank\&quot;&gt;recurring payments guide&lt;/a&gt;. 
     * @param {String} customerId Unique ID of the saved customer resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/PaymentInstrumentCard} opts.body 
     * @param {module:api/CustomersApi~customersCustomerIdPaymentInstrumentsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersCustomerIdPaymentInstrumentsPost(customerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdPaymentInstrumentsPost");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = PaymentInstrumentResponse;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment-instruments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersCustomerIdPaymentInstrumentsTokenDelete operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdPaymentInstrumentsTokenDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate a payment instrument
     * Deactivates an identified card payment instrument resource for a customer.
     * @param {String} customerId Unique ID of the saved customer resource.
     * @param {String} token Unique token identifying the card saved as a payment instrument resource.
     * @param {module:api/CustomersApi~customersCustomerIdPaymentInstrumentsTokenDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    customersCustomerIdPaymentInstrumentsTokenDelete(customerId, token, callback) {
      
      let postBody = null;
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdPaymentInstrumentsTokenDelete");
      }
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling customersCustomerIdPaymentInstrumentsTokenDelete");
      }

      let pathParams = {
        'customer_id': customerId,'token': token
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/customers/{customer_id}/payment-instruments/{token}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersCustomerIdPut operation.
     * @callback moduleapi/CustomersApi~customersCustomerIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a customer
     * Updates an identified saved customer resource&#x27;s personal details.   The request only overwrites the parameters included in the request, all other parameters will remain with their initially assigned values. 
     * @param {String} customerId Unique ID of the saved customer resource.
     * @param {Object} opts Optional parameters
     * @param {Object} opts.body 
     * @param {module:api/CustomersApi~customersCustomerIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersCustomerIdPut(customerId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling customersCustomerIdPut");
      }

      let pathParams = {
        'customer_id': customerId
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerResponse;

      return this.apiClient.callApi(
        '/customers/{customer_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the customersPost operation.
     * @callback moduleapi/CustomersApi~customersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CustomerResponse{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a customer
     * Creates a new saved customer resource which you can later manipulate and save payment instruments to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Customer} opts.body Details of the customer.
     * @param {module:api/CustomersApi~customersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    customersPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        
      };
      let formParams = {
        
      };

      let authNames = ['accessToken'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CustomerResponse;

      return this.apiClient.callApi(
        '/customers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}