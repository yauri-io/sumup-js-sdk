/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SumUpRestApi);
  }
}(this, function(expect, SumUpRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SumUpRestApi.CheckoutsApi();
  });

  describe('(package)', function() {
    describe('CheckoutsApi', function() {
      describe('checkoutsGet', function() {
        it('should call checkoutsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for checkoutsGet call and complete the assertions
          /*
          var opts = {};

          instance.checkoutsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(SumUpRestApi.CheckoutSuccess);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkoutsIdDelete', function() {
        it('should call checkoutsIdDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for checkoutsIdDelete call and complete the assertions
          /*

          instance.checkoutsIdDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SumUpRestApi.InlineResponse2001);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkoutsIdGet', function() {
        it('should call checkoutsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for checkoutsIdGet call and complete the assertions
          /*

          instance.checkoutsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SumUpRestApi.CheckoutSuccess);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkoutsIdPut', function() {
        it('should call checkoutsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for checkoutsIdPut call and complete the assertions
          /*
          var opts = {};

          instance.checkoutsIdPut(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SumUpRestApi.CheckoutSuccess);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('checkoutsPost', function() {
        it('should call checkoutsPost successfully', function(done) {
          // TODO: uncomment, update parameter values for checkoutsPost call and complete the assertions
          /*
          var opts = {};

          instance.checkoutsPost(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(SumUpRestApi.Checkout);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
