/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SumUpRestApi);
  }
}(this, function(expect, SumUpRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('CheckoutAcceptedNextStepPayload', function() {
      beforeEach(function() {
        instance = new SumUpRestApi.CheckoutAcceptedNextStepPayload();
      });

      it('should create an instance of CheckoutAcceptedNextStepPayload', function() {
        // TODO: update the code to test CheckoutAcceptedNextStepPayload
        expect(instance).to.be.a(SumUpRestApi.CheckoutAcceptedNextStepPayload);
      });

      it('should have the property paReq (base name: "PaReq")', function() {
        // TODO: update the code to test the property paReq
        expect(instance).to.have.property('paReq');
        // expect(instance.paReq).to.be(expectedValueLiteral);
      });

      it('should have the property MD (base name: "MD")', function() {
        // TODO: update the code to test the property MD
        expect(instance).to.have.property('MD');
        // expect(instance.MD).to.be(expectedValueLiteral);
      });

      it('should have the property termUrl (base name: "TermUrl")', function() {
        // TODO: update the code to test the property termUrl
        expect(instance).to.have.property('termUrl');
        // expect(instance.termUrl).to.be(expectedValueLiteral);
      });

    });
  });

}));
