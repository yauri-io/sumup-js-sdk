/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SumUpRestApi);
  }
}(this, function(expect, SumUpRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TransactionFull', function() {
      beforeEach(function() {
        instance = new SumUpRestApi.TransactionFull();
      });

      it('should create an instance of TransactionFull', function() {
        // TODO: update the code to test TransactionFull
        expect(instance).to.be.a(SumUpRestApi.TransactionFull);
      });

      it('should have the property merchantCode (base name: "merchant_code")', function() {
        // TODO: update the code to test the property merchantCode
        expect(instance).to.have.property('merchantCode');
        // expect(instance.merchantCode).to.be(expectedValueLiteral);
      });

      it('should have the property vatAmount (base name: "vat_amount")', function() {
        // TODO: update the code to test the property vatAmount
        expect(instance).to.have.property('vatAmount');
        // expect(instance.vatAmount).to.be(expectedValueLiteral);
      });

      it('should have the property tipAmount (base name: "tip_amount")', function() {
        // TODO: update the code to test the property tipAmount
        expect(instance).to.have.property('tipAmount');
        // expect(instance.tipAmount).to.be(expectedValueLiteral);
      });

      it('should have the property entryMode (base name: "entry_mode")', function() {
        // TODO: update the code to test the property entryMode
        expect(instance).to.have.property('entryMode');
        // expect(instance.entryMode).to.be(expectedValueLiteral);
      });

      it('should have the property authCode (base name: "auth_code")', function() {
        // TODO: update the code to test the property authCode
        expect(instance).to.have.property('authCode');
        // expect(instance.authCode).to.be(expectedValueLiteral);
      });

      it('should have the property internalId (base name: "internal_id")', function() {
        // TODO: update the code to test the property internalId
        expect(instance).to.have.property('internalId');
        // expect(instance.internalId).to.be(expectedValueLiteral);
      });

      it('should have the property productSummary (base name: "product_summary")', function() {
        // TODO: update the code to test the property productSummary
        expect(instance).to.have.property('productSummary');
        // expect(instance.productSummary).to.be(expectedValueLiteral);
      });

      it('should have the property payoutsTotal (base name: "payouts_total")', function() {
        // TODO: update the code to test the property payoutsTotal
        expect(instance).to.have.property('payoutsTotal');
        // expect(instance.payoutsTotal).to.be(expectedValueLiteral);
      });

      it('should have the property payoutsReceived (base name: "payouts_received")', function() {
        // TODO: update the code to test the property payoutsReceived
        expect(instance).to.have.property('payoutsReceived');
        // expect(instance.payoutsReceived).to.be(expectedValueLiteral);
      });

      it('should have the property payoutPlan (base name: "payout_plan")', function() {
        // TODO: update the code to test the property payoutPlan
        expect(instance).to.have.property('payoutPlan');
        // expect(instance.payoutPlan).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property lat (base name: "lat")', function() {
        // TODO: update the code to test the property lat
        expect(instance).to.have.property('lat');
        // expect(instance.lat).to.be(expectedValueLiteral);
      });

      it('should have the property lon (base name: "lon")', function() {
        // TODO: update the code to test the property lon
        expect(instance).to.have.property('lon');
        // expect(instance.lon).to.be(expectedValueLiteral);
      });

      it('should have the property horizontalAccuracy (base name: "horizontal_accuracy")', function() {
        // TODO: update the code to test the property horizontalAccuracy
        expect(instance).to.have.property('horizontalAccuracy');
        // expect(instance.horizontalAccuracy).to.be(expectedValueLiteral);
      });

      it('should have the property simplePaymentType (base name: "simple_payment_type")', function() {
        // TODO: update the code to test the property simplePaymentType
        expect(instance).to.have.property('simplePaymentType');
        // expect(instance.simplePaymentType).to.be(expectedValueLiteral);
      });

      it('should have the property verificationMethod (base name: "verification_method")', function() {
        // TODO: update the code to test the property verificationMethod
        expect(instance).to.have.property('verificationMethod');
        // expect(instance.verificationMethod).to.be(expectedValueLiteral);
      });

      it('should have the property card (base name: "card")', function() {
        // TODO: update the code to test the property card
        expect(instance).to.have.property('card');
        // expect(instance.card).to.be(expectedValueLiteral);
      });

      it('should have the property localTime (base name: "local_time")', function() {
        // TODO: update the code to test the property localTime
        expect(instance).to.have.property('localTime');
        // expect(instance.localTime).to.be(expectedValueLiteral);
      });

      it('should have the property payoutType (base name: "payout_type")', function() {
        // TODO: update the code to test the property payoutType
        expect(instance).to.have.property('payoutType');
        // expect(instance.payoutType).to.be(expectedValueLiteral);
      });

      it('should have the property products (base name: "products")', function() {
        // TODO: update the code to test the property products
        expect(instance).to.have.property('products');
        // expect(instance.products).to.be(expectedValueLiteral);
      });

      it('should have the property vatRates (base name: "vat_rates")', function() {
        // TODO: update the code to test the property vatRates
        expect(instance).to.have.property('vatRates');
        // expect(instance.vatRates).to.be(expectedValueLiteral);
      });

      it('should have the property transactionEvents (base name: "transaction_events")', function() {
        // TODO: update the code to test the property transactionEvents
        expect(instance).to.have.property('transactionEvents');
        // expect(instance.transactionEvents).to.be(expectedValueLiteral);
      });

      it('should have the property simpleStatus (base name: "simple_status")', function() {
        // TODO: update the code to test the property simpleStatus
        expect(instance).to.have.property('simpleStatus');
        // expect(instance.simpleStatus).to.be(expectedValueLiteral);
      });

      it('should have the property links (base name: "links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property events (base name: "events")', function() {
        // TODO: update the code to test the property events
        expect(instance).to.have.property('events');
        // expect(instance.events).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property taxEnabled (base name: "tax_enabled")', function() {
        // TODO: update the code to test the property taxEnabled
        expect(instance).to.have.property('taxEnabled');
        // expect(instance.taxEnabled).to.be(expectedValueLiteral);
      });

    });
  });

}));
