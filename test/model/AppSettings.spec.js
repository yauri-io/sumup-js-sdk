/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SumUpRestApi);
  }
}(this, function(expect, SumUpRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('AppSettings', function() {
      beforeEach(function() {
        instance = new SumUpRestApi.AppSettings();
      });

      it('should create an instance of AppSettings', function() {
        // TODO: update the code to test AppSettings
        expect(instance).to.be.a(SumUpRestApi.AppSettings);
      });

      it('should have the property checkoutPreference (base name: "checkout_preference")', function() {
        // TODO: update the code to test the property checkoutPreference
        expect(instance).to.have.property('checkoutPreference');
        // expect(instance.checkoutPreference).to.be(expectedValueLiteral);
      });

      it('should have the property includeVat (base name: "include_vat")', function() {
        // TODO: update the code to test the property includeVat
        expect(instance).to.have.property('includeVat');
        // expect(instance.includeVat).to.be(expectedValueLiteral);
      });

      it('should have the property manualEntryTutorial (base name: "manual_entry_tutorial")', function() {
        // TODO: update the code to test the property manualEntryTutorial
        expect(instance).to.have.property('manualEntryTutorial');
        // expect(instance.manualEntryTutorial).to.be(expectedValueLiteral);
      });

      it('should have the property mobilePaymentTutorial (base name: "mobile_payment_tutorial")', function() {
        // TODO: update the code to test the property mobilePaymentTutorial
        expect(instance).to.have.property('mobilePaymentTutorial');
        // expect(instance.mobilePaymentTutorial).to.be(expectedValueLiteral);
      });

      it('should have the property taxEnabled (base name: "tax_enabled")', function() {
        // TODO: update the code to test the property taxEnabled
        expect(instance).to.have.property('taxEnabled');
        // expect(instance.taxEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property mobilePayment (base name: "mobile_payment")', function() {
        // TODO: update the code to test the property mobilePayment
        expect(instance).to.have.property('mobilePayment');
        // expect(instance.mobilePayment).to.be(expectedValueLiteral);
      });

      it('should have the property readerPayment (base name: "reader_payment")', function() {
        // TODO: update the code to test the property readerPayment
        expect(instance).to.have.property('readerPayment');
        // expect(instance.readerPayment).to.be(expectedValueLiteral);
      });

      it('should have the property cashPayment (base name: "cash_payment")', function() {
        // TODO: update the code to test the property cashPayment
        expect(instance).to.have.property('cashPayment');
        // expect(instance.cashPayment).to.be(expectedValueLiteral);
      });

      it('should have the property advancedMode (base name: "advanced_mode")', function() {
        // TODO: update the code to test the property advancedMode
        expect(instance).to.have.property('advancedMode');
        // expect(instance.advancedMode).to.be(expectedValueLiteral);
      });

      it('should have the property expectedMaxTransactionAmount (base name: "expected_max_transaction_amount")', function() {
        // TODO: update the code to test the property expectedMaxTransactionAmount
        expect(instance).to.have.property('expectedMaxTransactionAmount');
        // expect(instance.expectedMaxTransactionAmount).to.be(expectedValueLiteral);
      });

      it('should have the property manualEntry (base name: "manual_entry")', function() {
        // TODO: update the code to test the property manualEntry
        expect(instance).to.have.property('manualEntry');
        // expect(instance.manualEntry).to.be(expectedValueLiteral);
      });

      it('should have the property terminalModeTutorial (base name: "terminal_mode_tutorial")', function() {
        // TODO: update the code to test the property terminalModeTutorial
        expect(instance).to.have.property('terminalModeTutorial');
        // expect(instance.terminalModeTutorial).to.be(expectedValueLiteral);
      });

      it('should have the property tipping (base name: "tipping")', function() {
        // TODO: update the code to test the property tipping
        expect(instance).to.have.property('tipping');
        // expect(instance.tipping).to.be(expectedValueLiteral);
      });

      it('should have the property tipRates (base name: "tip_rates")', function() {
        // TODO: update the code to test the property tipRates
        expect(instance).to.have.property('tipRates');
        // expect(instance.tipRates).to.be(expectedValueLiteral);
      });

      it('should have the property barcodeScanner (base name: "barcode_scanner")', function() {
        // TODO: update the code to test the property barcodeScanner
        expect(instance).to.have.property('barcodeScanner');
        // expect(instance.barcodeScanner).to.be(expectedValueLiteral);
      });

      it('should have the property referral (base name: "referral")', function() {
        // TODO: update the code to test the property referral
        expect(instance).to.have.property('referral');
        // expect(instance.referral).to.be(expectedValueLiteral);
      });

    });
  });

}));
