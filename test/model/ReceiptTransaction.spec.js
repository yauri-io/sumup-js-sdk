/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SumUpRestApi);
  }
}(this, function(expect, SumUpRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ReceiptTransaction', function() {
      beforeEach(function() {
        instance = new SumUpRestApi.ReceiptTransaction();
      });

      it('should create an instance of ReceiptTransaction', function() {
        // TODO: update the code to test ReceiptTransaction
        expect(instance).to.be.a(SumUpRestApi.ReceiptTransaction);
      });

      it('should have the property transactionCode (base name: "transaction_code")', function() {
        // TODO: update the code to test the property transactionCode
        expect(instance).to.have.property('transactionCode');
        // expect(instance.transactionCode).to.be(expectedValueLiteral);
      });

      it('should have the property amount (base name: "amount")', function() {
        // TODO: update the code to test the property amount
        expect(instance).to.have.property('amount');
        // expect(instance.amount).to.be(expectedValueLiteral);
      });

      it('should have the property vatAmount (base name: "vat_amount")', function() {
        // TODO: update the code to test the property vatAmount
        expect(instance).to.have.property('vatAmount');
        // expect(instance.vatAmount).to.be(expectedValueLiteral);
      });

      it('should have the property tipAmount (base name: "tip_amount")', function() {
        // TODO: update the code to test the property tipAmount
        expect(instance).to.have.property('tipAmount');
        // expect(instance.tipAmount).to.be(expectedValueLiteral);
      });

      it('should have the property feeAmount (base name: "fee_amount")', function() {
        // TODO: update the code to test the property feeAmount
        expect(instance).to.have.property('feeAmount');
        // expect(instance.feeAmount).to.be(expectedValueLiteral);
      });

      it('should have the property currency (base name: "currency")', function() {
        // TODO: update the code to test the property currency
        expect(instance).to.have.property('currency');
        // expect(instance.currency).to.be(expectedValueLiteral);
      });

      it('should have the property timestamp (base name: "timestamp")', function() {
        // TODO: update the code to test the property timestamp
        expect(instance).to.have.property('timestamp');
        // expect(instance.timestamp).to.be(expectedValueLiteral);
      });

      it('should have the property status (base name: "status")', function() {
        // TODO: update the code to test the property status
        expect(instance).to.have.property('status');
        // expect(instance.status).to.be(expectedValueLiteral);
      });

      it('should have the property paymentType (base name: "payment_type")', function() {
        // TODO: update the code to test the property paymentType
        expect(instance).to.have.property('paymentType');
        // expect(instance.paymentType).to.be(expectedValueLiteral);
      });

      it('should have the property entryMode (base name: "entry_mode")', function() {
        // TODO: update the code to test the property entryMode
        expect(instance).to.have.property('entryMode');
        // expect(instance.entryMode).to.be(expectedValueLiteral);
      });

      it('should have the property verificationMethod (base name: "verification_method")', function() {
        // TODO: update the code to test the property verificationMethod
        expect(instance).to.have.property('verificationMethod');
        // expect(instance.verificationMethod).to.be(expectedValueLiteral);
      });

      it('should have the property card (base name: "card")', function() {
        // TODO: update the code to test the property card
        expect(instance).to.have.property('card');
        // expect(instance.card).to.be(expectedValueLiteral);
      });

      it('should have the property installmentsCount (base name: "installments_count")', function() {
        // TODO: update the code to test the property installmentsCount
        expect(instance).to.have.property('installmentsCount');
        // expect(instance.installmentsCount).to.be(expectedValueLiteral);
      });

      it('should have the property customerEmail (base name: "customer_email")', function() {
        // TODO: update the code to test the property customerEmail
        expect(instance).to.have.property('customerEmail');
        // expect(instance.customerEmail).to.be(expectedValueLiteral);
      });

      it('should have the property products (base name: "products")', function() {
        // TODO: update the code to test the property products
        expect(instance).to.have.property('products');
        // expect(instance.products).to.be(expectedValueLiteral);
      });

      it('should have the property vatRates (base name: "vat_rates")', function() {
        // TODO: update the code to test the property vatRates
        expect(instance).to.have.property('vatRates');
        // expect(instance.vatRates).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property events (base name: "events")', function() {
        // TODO: update the code to test the property events
        expect(instance).to.have.property('events');
        // expect(instance.events).to.be(expectedValueLiteral);
      });

      it('should have the property receiptNo (base name: "receipt_no")', function() {
        // TODO: update the code to test the property receiptNo
        expect(instance).to.have.property('receiptNo');
        // expect(instance.receiptNo).to.be(expectedValueLiteral);
      });

    });
  });

}));
