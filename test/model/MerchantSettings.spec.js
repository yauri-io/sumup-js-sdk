/*
 * SumUp REST API
 * SumUpâ€™s REST API operates with `application/json` HTTP requests and response. The request bodies are sent through resource-oriented URLs and use the standard HTTP response codes.  For testing our APIs, please <a href='https://cloud.crm.sumup.com/sumup-developers-contact-form'>contact us</a> for a test account.   When you receive your test account you can create your <a href='https://developer.sumup.com/docs/register-app/#3-create-oauth-client-credentials' target='_blank'>client credentials</a> and process different requests with real payment instruments, without charging them.  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.34
 *
 * Do not edit the class manually.
 *
 */
(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SumUpRestApi);
  }
}(this, function(expect, SumUpRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('MerchantSettings', function() {
      beforeEach(function() {
        instance = new SumUpRestApi.MerchantSettings();
      });

      it('should create an instance of MerchantSettings', function() {
        // TODO: update the code to test MerchantSettings
        expect(instance).to.be.a(SumUpRestApi.MerchantSettings);
      });

      it('should have the property taxEnabled (base name: "tax_enabled")', function() {
        // TODO: update the code to test the property taxEnabled
        expect(instance).to.have.property('taxEnabled');
        // expect(instance.taxEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property payoutType (base name: "payout_type")', function() {
        // TODO: update the code to test the property payoutType
        expect(instance).to.have.property('payoutType');
        // expect(instance.payoutType).to.be(expectedValueLiteral);
      });

      it('should have the property payoutPeriod (base name: "payout_period")', function() {
        // TODO: update the code to test the property payoutPeriod
        expect(instance).to.have.property('payoutPeriod');
        // expect(instance.payoutPeriod).to.be(expectedValueLiteral);
      });

      it('should have the property payoutOnDemandAvailable (base name: "payout_on_demand_available")', function() {
        // TODO: update the code to test the property payoutOnDemandAvailable
        expect(instance).to.have.property('payoutOnDemandAvailable');
        // expect(instance.payoutOnDemandAvailable).to.be(expectedValueLiteral);
      });

      it('should have the property payoutOnDemand (base name: "payout_on_demand")', function() {
        // TODO: update the code to test the property payoutOnDemand
        expect(instance).to.have.property('payoutOnDemand');
        // expect(instance.payoutOnDemand).to.be(expectedValueLiteral);
      });

      it('should have the property printersEnabled (base name: "printers_enabled")', function() {
        // TODO: update the code to test the property printersEnabled
        expect(instance).to.have.property('printersEnabled');
        // expect(instance.printersEnabled).to.be(expectedValueLiteral);
      });

      it('should have the property payoutInstrument (base name: "payout_instrument")', function() {
        // TODO: update the code to test the property payoutInstrument
        expect(instance).to.have.property('payoutInstrument');
        // expect(instance.payoutInstrument).to.be(expectedValueLiteral);
      });

      it('should have the property motoPayment (base name: "moto_payment")', function() {
        // TODO: update the code to test the property motoPayment
        expect(instance).to.have.property('motoPayment');
        // expect(instance.motoPayment).to.be(expectedValueLiteral);
      });

      it('should have the property stoneMerchantCode (base name: "stone_merchant_code")', function() {
        // TODO: update the code to test the property stoneMerchantCode
        expect(instance).to.have.property('stoneMerchantCode');
        // expect(instance.stoneMerchantCode).to.be(expectedValueLiteral);
      });

      it('should have the property adyenMerchantCode (base name: "adyen_merchant_code")', function() {
        // TODO: update the code to test the property adyenMerchantCode
        expect(instance).to.have.property('adyenMerchantCode');
        // expect(instance.adyenMerchantCode).to.be(expectedValueLiteral);
      });

      it('should have the property adyenUser (base name: "adyen_user")', function() {
        // TODO: update the code to test the property adyenUser
        expect(instance).to.have.property('adyenUser');
        // expect(instance.adyenUser).to.be(expectedValueLiteral);
      });

      it('should have the property adyenPassword (base name: "adyen_password")', function() {
        // TODO: update the code to test the property adyenPassword
        expect(instance).to.have.property('adyenPassword');
        // expect(instance.adyenPassword).to.be(expectedValueLiteral);
      });

      it('should have the property adyenCompany (base name: "adyen_company")', function() {
        // TODO: update the code to test the property adyenCompany
        expect(instance).to.have.property('adyenCompany');
        // expect(instance.adyenCompany).to.be(expectedValueLiteral);
      });

      it('should have the property dailyPayoutEmail (base name: "daily_payout_email")', function() {
        // TODO: update the code to test the property dailyPayoutEmail
        expect(instance).to.have.property('dailyPayoutEmail');
        // expect(instance.dailyPayoutEmail).to.be(expectedValueLiteral);
      });

      it('should have the property monthlyPayoutEmail (base name: "monthly_payout_email")', function() {
        // TODO: update the code to test the property monthlyPayoutEmail
        expect(instance).to.have.property('monthlyPayoutEmail');
        // expect(instance.monthlyPayoutEmail).to.be(expectedValueLiteral);
      });

      it('should have the property grossSettlement (base name: "gross_settlement")', function() {
        // TODO: update the code to test the property grossSettlement
        expect(instance).to.have.property('grossSettlement');
        // expect(instance.grossSettlement).to.be(expectedValueLiteral);
      });

    });
  });

}));
